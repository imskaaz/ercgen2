{"remainingRequest":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\breze\\Desktop\\ercgen\\.vuepress\\components\\Generator.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\breze\\Desktop\\ercgen\\.vuepress\\components\\Generator.vue","mtime":1581174957178},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBkYXBwIGZyb20gJy4uL21peGlucy9kYXBwJzsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnR2VuZXJhdG9yJywKICBtaXhpbnM6IFsKICAgIGRhcHAsCiAgXSwKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIGxvYWRpbmc6IHRydWUsCiAgICAgIGN1cnJlbnROZXR3b3JrOiBudWxsLAogICAgICB0cnhIYXNoOiAnJywKICAgICAgbWFraW5nVHJhbnNhY3Rpb246IGZhbHNlLAogICAgICBmb3JtRGlzYWJsZWQ6IGZhbHNlLAogICAgICB0b2tlbjoge30sCiAgICAgIGVuYWJsZVRyYW5zZmVyOiB0cnVlLAogICAgfTsKICB9LAogIG1vdW50ZWQgKCkgewogICAgdGhpcy5jdXJyZW50TmV0d29yayA9IHRoaXMuZ2V0UGFyYW0oJ25ldHdvcmsnKSB8fCB0aGlzLm5ldHdvcmsuZGVmYXVsdDsKICAgIHRoaXMuaW5pdERhcHAoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGFzeW5jIGluaXREYXBwICgpIHsKICAgICAgdGhpcy5uZXR3b3JrLmN1cnJlbnQgPSB0aGlzLm5ldHdvcmsubGlzdFt0aGlzLmN1cnJlbnROZXR3b3JrXTsKICAgICAgdHJ5IHsKICAgICAgICBhd2FpdCB0aGlzLmluaXRXZWIzKHRoaXMuY3VycmVudE5ldHdvcmssIHRydWUpOwogICAgICAgIHRoaXMuaW5pdFRva2VuKCk7CiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBhbGVydChlKTsKICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gdGhpcy4kd2l0aEJhc2UoJy8nKTsKICAgICAgfQogICAgfSwKICAgIGFzeW5jIGdlbmVyYXRlVG9rZW4gKCkgewogICAgICB0aGlzLiRyZWZzLm9ic2VydmVyLnZhbGlkYXRlKCkudGhlbihhc3luYyAocmVzdWx0KSA9PiB7CiAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgaWYgKCF0aGlzLm1ldGFtYXNrLmluc3RhbGxlZCkgewogICAgICAgICAgICBhbGVydCgnVG8gY3JlYXRlIGEgVG9rZW4gcGxlYXNlIGluc3RhbGwgTWV0YU1hc2shJyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh0aGlzLm1ldGFtYXNrLm5ldElkICE9PSB0aGlzLm5ldHdvcmsuY3VycmVudC5pZCkgewogICAgICAgICAgICAgIGFsZXJ0KGBZb3VyIE1ldGFNYXNrIGluIG9uIHRoZSB3cm9uZyBuZXR3b3JrLiBQbGVhc2Ugc3dpdGNoIG9uICR7dGhpcy5uZXR3b3JrLmN1cnJlbnQubmFtZX0gYW5kIHRyeSBhZ2FpbiFgKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy50b2tlbi5uYW1lOwogICAgICAgICAgY29uc3Qgc3ltYm9sID0gdGhpcy50b2tlbi5zeW1ib2wudG9VcHBlckNhc2UoKTsKICAgICAgICAgIGNvbnN0IGRlY2ltYWxzID0gbmV3IHRoaXMud2ViMy5CaWdOdW1iZXIodGhpcy50b2tlbi5kZWNpbWFscyk7CiAgICAgICAgICBjb25zdCBjYXAgPSBuZXcgdGhpcy53ZWIzLkJpZ051bWJlcih0aGlzLnRva2VuLmNhcCkubXVsKE1hdGgucG93KDEwLCB0aGlzLnRva2VuLmRlY2ltYWxzKSk7CiAgICAgICAgICBjb25zdCBpbml0aWFsQmFsYW5jZSA9IG5ldyB0aGlzLndlYjMuQmlnTnVtYmVyKHRoaXMudG9rZW4uaW5pdGlhbEJhbGFuY2UpLm11bChNYXRoLnBvdygxMCwgdGhpcy50b2tlbi5kZWNpbWFscykpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1sZW4KICAgICAgICAgIGNvbnN0IGVuYWJsZVRyYW5zZmVyID0gdGhpcy5lbmFibGVUcmFuc2ZlcjsKCiAgICAgICAgICB0cnkgewogICAgICAgICAgICB0aGlzLnRyeEhhc2ggPSAnJzsKICAgICAgICAgICAgdGhpcy5mb3JtRGlzYWJsZWQgPSB0cnVlOwogICAgICAgICAgICB0aGlzLm1ha2luZ1RyYW5zYWN0aW9uID0gdHJ1ZTsKCiAgICAgICAgICAgIGlmICghdGhpcy5sZWdhY3kpIHsKICAgICAgICAgICAgICBhd2FpdCB0aGlzLndlYjNQcm92aWRlci5lbmFibGUoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy5jb250cmFjdHMudG9rZW4ubmV3KAogICAgICAgICAgICAgICAgbmFtZSwKICAgICAgICAgICAgICAgIHN5bWJvbCwKICAgICAgICAgICAgICAgIGRlY2ltYWxzLAogICAgICAgICAgICAgICAgY2FwLAogICAgICAgICAgICAgICAgaW5pdGlhbEJhbGFuY2UsCiAgICAgICAgICAgICAgICBlbmFibGVUcmFuc2ZlciwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgZnJvbTogdGhpcy53ZWIzLmV0aC5jb2luYmFzZSwKICAgICAgICAgICAgICAgICAgZGF0YTogdGhpcy5jb250cmFjdHMudG9rZW4uYnl0ZWNvZGUsCiAgICAgICAgICAgICAgICB9LCAoZSwgdG9rZW5Db250cmFjdCkgPT4gewogICAgICAgICAgICAgICAgICBpZiAoZSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMubWFraW5nVHJhbnNhY3Rpb24gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1EaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IFRoZSBjYWxsYmFjayB3aWxsIGZpcmUgdHdpY2UhCiAgICAgICAgICAgICAgICAgICAgLy8gT25jZSB0aGUgY29udHJhY3QgaGFzIHRoZSB0cmFuc2FjdGlvbkhhc2ggcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICAvLyBzZXQgYW5kIG9uY2UgaXRzIGRlcGxveWVkIG9uIGFuIGFkZHJlc3MuCiAgICAgICAgICAgICAgICAgICAgaWYgKCF0b2tlbkNvbnRyYWN0LmFkZHJlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJ4SGFzaCA9IHRva2VuQ29udHJhY3QudHJhbnNhY3Rpb25IYXNoOwogICAgICAgICAgICAgICAgICAgICAgdGhpcy50cnhMaW5rID0gdGhpcy5uZXR3b3JrLmN1cnJlbnQuZXRoZXJzY2FuTGluayArICcvdHgvJyArIHRoaXMudHJ4SGFzaDsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbi5hZGRyZXNzID0gdG9rZW5Db250cmFjdC5hZGRyZXNzOwogICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbi5saW5rID0gdGhpcy5uZXR3b3JrLmN1cnJlbnQuZXRoZXJzY2FuTGluayArICcvdG9rZW4vJyArIHRoaXMudG9rZW4uYWRkcmVzczsKICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGZvcmNlVXBkYXRlKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0sIDUwMCk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIHRoaXMubWFraW5nVHJhbnNhY3Rpb24gPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5mb3JtRGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgYWxlcnQoJ1NvbWUgZXJyb3Igb2NjdXJyZWQuIE1heWJlIHlvdSByZWplY3RlZCB0aGUgdHJhbnNhY3Rpb24gb3IgeW91IGhhdmUgTWV0YU1hc2sgbG9ja2VkIScpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSkuY2F0Y2goKGUpID0+IHsKICAgICAgICBjb25zb2xlLmxvZyhlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlCiAgICAgICAgdGhpcy5tYWtpbmdUcmFuc2FjdGlvbiA9IGZhbHNlOwogICAgICAgIGFsZXJ0KCdTb21lIGVycm9yIG9jY3VycmVkLicpOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRQYXJhbSAocGFyYW0pIHsKICAgICAgY29uc3QgdmFycyA9IHt9OwogICAgICB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKGxvY2F0aW9uLmhhc2gsICcnKS5yZXBsYWNlKAogICAgICAgIC9bPyZdKyhbXj0mXSspPT8oW14mXSopPy9naSwgLy8gcmVnZXhwCiAgICAgICAgZnVuY3Rpb24gKG0sIGtleSwgdmFsdWUpIHsgLy8gY2FsbGJhY2sKICAgICAgICAgIHZhcnNba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6ICcnOwogICAgICAgIH0sCiAgICAgICk7CgogICAgICBpZiAocGFyYW0pIHsKICAgICAgICByZXR1cm4gdmFyc1twYXJhbV0gPyB2YXJzW3BhcmFtXSA6IG51bGw7CiAgICAgIH0KICAgICAgcmV0dXJuIHZhcnM7CiAgICB9LAogIH0sCn07Cg=="},{"version":3,"sources":["Generator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"Generator.vue","sourceRoot":".vuepress/components","sourcesContent":["<template>\n    <b-row>\n        <b-col lg=\"10\" offset-lg=\"1\" class=\"mt-4 p-0\">\n            <b-card bg-variant=\"light\" v-if=\"!loading\" :title=\"$site.title\">\n                <p class=\"card-text\">\n                    {{ $site.description }}\n                </p>\n                <small v-if=\"!metamask.installed\">\n                    You need the <a href=\"https://metamask.io/\" target=\"_blank\">MetaMask</a> extension.\n                </small>\n\n                <b-alert variant=\"success\" :show=\"makingTransaction\" class=\"mt-3\">\n                    <div>Making transaction.</div>\n                    <div v-if=\"!trxHash\">Please wait...</div>\n                    <div v-else>\n                        <b>Well! Transaction done!</b><br>\n                        Transaction id <a :href=\"trxLink\" target=\"_blank\"><span v-html=\"trxHash\"></span></a><br>\n\n                        Retrieving Token.\n                        <div v-if=\"!token.address\">Please wait...</div>\n                        <div v-else>\n                            <b>Your Token</b>\n                            <b-link :href=\"token.link\" target=\"_blank\"><span v-html=\"token.address\"></span></b-link>\n                        </div>\n                    </div>\n                </b-alert>\n\n                <ValidationObserver\n                        ref=\"observer\"\n                        v-if=\"!makingTransaction\"\n                        tag=\"form\"\n                        @submit.prevent=\"generateToken()\"\n                        class=\"mt-3\">\n                    <fieldset :disabled=\"formDisabled\">\n                        <b-card>\n                            <b-row>\n                                <b-col lg=\"4\">\n                                    <ValidationProvider\n                                            name=\"token name\"\n                                            :rules=\"{ required: true }\"\n                                            v-slot=\"{ errors }\">\n                                        <b-form-group\n                                                description=\"Choose a name for your token.\"\n                                                label=\"Token name *\"\n                                                label-for=\"tokenName\">\n                                            <b-form-input\n                                                    id=\"tokenName\"\n                                                    name=\"tokenName\"\n                                                    placeholder=\"Your token name\"\n                                                    v-model.trim=\"token.name\"\n                                                    :class=\"{'is-invalid': errors.length > 0}\"\n                                                    maxlength=\"20\">\n                                            </b-form-input>\n                                            <small v-show=\"errors.length > 0\" class=\"text-danger\">\n                                                {{ errors[0] }}\n                                            </small>\n                                        </b-form-group>\n                                    </ValidationProvider>\n                                </b-col>\n                                <b-col lg=\"4\">\n                                    <ValidationProvider\n                                            name=\"token symbol\"\n                                            :rules=\"{ required: true }\"\n                                            v-slot=\"{ errors }\">\n                                        <b-form-group\n                                                description=\"Choose a symbol for your token (usually 3-4 chars).\"\n                                                label=\"Token symbol *\"\n                                                label-for=\"tokenSymbol\">\n                                            <b-form-input\n                                                    id=\"tokenSymbol\"\n                                                    name=\"tokenSymbol\"\n                                                    placeholder=\"Your token symbol\"\n                                                    v-model.trim=\"token.symbol\"\n                                                    :class=\"{'is-invalid': errors.length > 0}\"\n                                                    maxlength=\"5\">\n                                            </b-form-input>\n                                            <small v-show=\"errors.length > 0\" class=\"text-danger\">\n                                                {{ errors[0] }}\n                                            </small>\n                                        </b-form-group>\n                                    </ValidationProvider>\n                                </b-col>\n                                <b-col lg=\"4\">\n                                    <ValidationProvider\n                                            name=\"token decimals\"\n                                            :rules=\"{ required: true, numeric: true, min_value: 0, max_value: 36 }\"\n                                            v-slot=\"{ errors }\">\n                                        <b-form-group\n                                                description=\"Insert the decimal precision of your token. If you don't know what to insert, use 18.\"\n                                                label=\"Token decimals *\"\n                                                label-for=\"tokenDecimals\">\n                                            <b-form-input\n                                                    id=\"tokenDecimals\"\n                                                    name=\"tokenDecimals\"\n                                                    placeholder=\"Your token decimals\"\n                                                    v-model.trim=\"token.decimals\"\n                                                    :class=\"{'is-invalid': errors.length > 0}\"\n                                                    step=\"1\">\n                                            </b-form-input>\n                                            <small v-show=\"errors.length > 0\" class=\"text-danger\">\n                                                {{ errors[0] }}\n                                            </small>\n                                        </b-form-group>\n                                    </ValidationProvider>\n                                </b-col>\n                            </b-row>\n                        </b-card>\n                        <b-card class=\"mt-3\">\n                            <b-row>\n                                <b-col lg=\"4\">\n                                    <ValidationProvider\n                                            name=\"token cap\"\n                                            :rules=\"{ required: true, numeric: true, min_value: 1, max_value: 1000000000000000 }\"\n                                            v-slot=\"{ errors }\">\n                                        <b-form-group\n                                                description=\"Insert the maximum number of tokens available.\"\n                                                label=\"Token cap *\"\n                                                label-for=\"tokenCap\">\n                                            <b-form-input\n                                                    id=\"tokenCap\"\n                                                    name=\"tokenCap\"\n                                                    placeholder=\"Your token cap\"\n                                                    v-model.trim=\"token.cap\"\n                                                    :class=\"{'is-invalid': errors.length > 0}\"\n                                                    step=\"1\">\n                                            </b-form-input>\n                                            <small v-show=\"errors.length > 0\" class=\"text-danger\">\n                                                {{ errors[0] }}\n                                            </small>\n                                        </b-form-group>\n                                    </ValidationProvider>\n                                </b-col>\n                                <b-col lg=\"4\">\n                                    <ValidationProvider\n                                            name=\"token initial balance\"\n                                            :rules=\"{ required: true, numeric: true, min_value: 0, max_value: token.cap || 0 }\"\n                                            v-slot=\"{ errors }\">\n                                        <b-form-group\n                                                description=\"Insert the initial number of tokens available. Will be put in your account.\"\n                                                label=\"Token initial balance *\"\n                                                label-for=\"tokenInitialBalance\">\n                                            <b-form-input\n                                                    id=\"tokenInitialBalance\"\n                                                    name=\"tokenInitialBalance\"\n                                                    placeholder=\"Your token initial balance\"\n                                                    v-model.trim=\"token.initialBalance\"\n                                                    :class=\"{'is-invalid': errors.length > 0}\"\n                                                    step=\"1\">\n                                            </b-form-input>\n                                            <small v-show=\"errors.length > 0\" class=\"text-danger\">\n                                                {{ errors[0] }}\n                                            </small>\n                                        </b-form-group>\n                                    </ValidationProvider>\n                                </b-col>\n                                <b-col lg=\"4\">\n                                    <b-form-group\n                                            description=\"Choose your Network.\"\n                                            label=\"Network *\"\n                                            label-for=\"network\">\n                                        <b-form-select id=\"network\" v-model=\"currentNetwork\" @input=\"initDapp\">\n                                            <option v-for=\"(n, k) in network.list\" :value=\"k\">{{ n.name }}</option>\n                                        </b-form-select>\n                                    </b-form-group>\n                                </b-col>\n                            </b-row>\n                        </b-card>\n                        <b-card class=\"mt-3\">\n                            <b-row>\n                                <b-col lg=\"12\">\n                                    <b-form-group\n                                            description=\"Choose to enable transfer during deploy or enable manually later.\"\n                                            label=\"Enable transfer\"\n                                            label-for=\"enableTransfer\">\n                                        <b-form-select id=\"network\" v-model=\"enableTransfer\">\n                                            <option :value=\"true\">Enable transfer during deploy</option>\n                                            <option :value=\"false\">Enable transfer manually later</option>\n                                        </b-form-select>\n                                    </b-form-group>\n\n                                    <b-alert show variant=\"warning\" v-if=\"enableTransfer === false\">\n                                        <strong>\n                                            NOTE: If you don't enable transfer during deploy, tokens won't be\n                                            transferable until you call the <i>enableTransfer</i> function.\n                                        </strong><br>\n                                        Only people (or smart contract) with <i>Operator</i> role will be able to\n                                        transfer tokens.<br>\n                                        Contract creator will be Operator by default, so he can transfer tokens also\n                                        when transfer is not enabled.<br>\n                                        You can also add or remove the Operator role to addresses.<br>\n                                        This is because, by business choices, you may decide not to enable transfer\n                                        until a specific time.\n                                    </b-alert>\n                                </b-col>\n                            </b-row>\n                        </b-card>\n                        <b-row class=\"mt-3\">\n                            <b-col lg=\"12\">\n                                <b-button variant=\"success\" size=\"lg\" type=\"submit\">Create Token</b-button>\n                            </b-col>\n                        </b-row>\n                    </fieldset>\n                </ValidationObserver>\n            </b-card>\n        </b-col>\n    </b-row>\n</template>\n\n<script>\n  import dapp from '../mixins/dapp';\n\n  export default {\n    name: 'Generator',\n    mixins: [\n      dapp,\n    ],\n    data () {\n      return {\n        loading: true,\n        currentNetwork: null,\n        trxHash: '',\n        makingTransaction: false,\n        formDisabled: false,\n        token: {},\n        enableTransfer: true,\n      };\n    },\n    mounted () {\n      this.currentNetwork = this.getParam('network') || this.network.default;\n      this.initDapp();\n    },\n    methods: {\n      async initDapp () {\n        this.network.current = this.network.list[this.currentNetwork];\n        try {\n          await this.initWeb3(this.currentNetwork, true);\n          this.initToken();\n          this.loading = false;\n        } catch (e) {\n          alert(e);\n          document.location.href = this.$withBase('/');\n        }\n      },\n      async generateToken () {\n        this.$refs.observer.validate().then(async (result) => {\n          if (result) {\n            if (!this.metamask.installed) {\n              alert('To create a Token please install MetaMask!');\n              return;\n            } else {\n              if (this.metamask.netId !== this.network.current.id) {\n                alert(`Your MetaMask in on the wrong network. Please switch on ${this.network.current.name} and try again!`);\n                return;\n              }\n            }\n\n            const name = this.token.name;\n            const symbol = this.token.symbol.toUpperCase();\n            const decimals = new this.web3.BigNumber(this.token.decimals);\n            const cap = new this.web3.BigNumber(this.token.cap).mul(Math.pow(10, this.token.decimals));\n            const initialBalance = new this.web3.BigNumber(this.token.initialBalance).mul(Math.pow(10, this.token.decimals)); // eslint-disable-line max-len\n            const enableTransfer = this.enableTransfer;\n\n            try {\n              this.trxHash = '';\n              this.formDisabled = true;\n              this.makingTransaction = true;\n\n              if (!this.legacy) {\n                await this.web3Provider.enable();\n              }\n\n              setTimeout(() => {\n                this.contracts.token.new(\n                  name,\n                  symbol,\n                  decimals,\n                  cap,\n                  initialBalance,\n                  enableTransfer,\n                  {\n                    from: this.web3.eth.coinbase,\n                    data: this.contracts.token.bytecode,\n                  }, (e, tokenContract) => {\n                    if (e) {\n                      this.makingTransaction = false;\n                      this.formDisabled = false;\n                    } else {\n                      // NOTE: The callback will fire twice!\n                      // Once the contract has the transactionHash property\n                      // set and once its deployed on an address.\n                      if (!tokenContract.address) {\n                        this.trxHash = tokenContract.transactionHash;\n                        this.trxLink = this.network.current.etherscanLink + '/tx/' + this.trxHash;\n                      } else {\n                        this.token.address = tokenContract.address;\n                        this.token.link = this.network.current.etherscanLink + '/token/' + this.token.address;\n                        this.$forceUpdate();\n                      }\n                    }\n                  },\n                );\n              }, 500);\n            } catch (e) {\n              this.makingTransaction = false;\n              this.formDisabled = false;\n              alert('Some error occurred. Maybe you rejected the transaction or you have MetaMask locked!');\n            }\n          }\n        }).catch((e) => {\n          console.log(e); // eslint-disable-line no-console\n          this.makingTransaction = false;\n          alert('Some error occurred.');\n        });\n      },\n      getParam (param) {\n        const vars = {};\n        window.location.href.replace(location.hash, '').replace(\n          /[?&]+([^=&]+)=?([^&]*)?/gi, // regexp\n          function (m, key, value) { // callback\n            vars[key] = value !== undefined ? value : '';\n          },\n        );\n\n        if (param) {\n          return vars[param] ? vars[param] : null;\n        }\n        return vars;\n      },\n    },\n  };\n</script>\n"]}]}