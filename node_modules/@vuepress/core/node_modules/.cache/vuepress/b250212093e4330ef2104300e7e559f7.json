{"remainingRequest":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\breze\\Desktop\\ercgen\\.vuepress\\components\\Docs.vue?vue&type=template&id=08f1fa9c&","dependencies":[{"path":"C:\\Users\\breze\\Desktop\\ercgen\\.vuepress\\components\\Docs.vue","mtime":1577190872000},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}