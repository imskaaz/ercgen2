{"remainingRequest":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\breze\\Desktop\\ercgen\\.vuepress\\components\\Generator.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\breze\\Desktop\\ercgen\\.vuepress\\components\\Generator.vue","mtime":1577190872000},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breze\\Desktop\\ercgen\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Generator.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <b-row>\n        <b-col lg=\"10\" offset-lg=\"1\" class=\"mt-4 p-0\">\n            <b-card bg-variant=\"light\" v-if=\"!loading\" :title=\"$site.title\">\n                <p class=\"card-text\">\n                    {{ $site.description }}\n                </p>\n                <small v-if=\"!metamask.installed\">\n                    You need the <a href=\"https://metamask.io/\" target=\"_blank\">MetaMask</a> extension.\n                </small>\n\n                <b-alert variant=\"success\" :show=\"makingTransaction\" class=\"mt-3\">\n                    <div>Making transaction.</div>\n                    <div v-if=\"!trxHash\">Please wait...</div>\n                    <div v-else>\n                        <b>Well! Transaction done!</b><br>\n                        Transaction id <a :href=\"trxLink\" target=\"_blank\"><span v-html=\"trxHash\"></span></a><br>\n\n                        Retrieving Token.\n                        <div v-if=\"!token.address\">Please wait...</div>\n                        <div v-else>\n                            <b>Your Token</b>\n                            <b-link :href=\"token.link\" target=\"_blank\"><span v-html=\"token.address\"></span></b-link>\n                        </div>\n                    </div>\n                </b-alert>\n\n                <ValidationObserver\n                        ref=\"observer\"\n                        v-if=\"!makingTransaction\"\n                        tag=\"form\"\n                        @submit.prevent=\"generateToken()\"\n                        class=\"mt-3\">\n                    <fieldset :disabled=\"formDisabled\">\n                        <b-card>\n                            <b-row>\n                                <b-col lg=\"4\">\n                                    <ValidationProvider\n                                            name=\"token name\"\n                                            :rules=\"{ required: true }\"\n                                            v-slot=\"{ errors }\">\n                                        <b-form-group\n                                                description=\"Choose a name for your token.\"\n                                                label=\"Token name *\"\n                                                label-for=\"tokenName\">\n                                            <b-form-input\n                                                    id=\"tokenName\"\n                                                    name=\"tokenName\"\n                                                    placeholder=\"Your token name\"\n                                                    v-model.trim=\"token.name\"\n                                                    :class=\"{'is-invalid': errors.length > 0}\"\n                                                    maxlength=\"20\">\n                                            </b-form-input>\n                                            <small v-show=\"errors.length > 0\" class=\"text-danger\">\n                                                {{ errors[0] }}\n                                            </small>\n                                        </b-form-group>\n                                    </ValidationProvider>\n                                </b-col>\n                                <b-col lg=\"4\">\n                                    <ValidationProvider\n                                            name=\"token symbol\"\n                                            :rules=\"{ required: true }\"\n                                            v-slot=\"{ errors }\">\n                                        <b-form-group\n                                                description=\"Choose a symbol for your token (usually 3-4 chars).\"\n                                                label=\"Token symbol *\"\n                                                label-for=\"tokenSymbol\">\n                                            <b-form-input\n                                                    id=\"tokenSymbol\"\n                                                    name=\"tokenSymbol\"\n                                                    placeholder=\"Your token symbol\"\n                                                    v-model.trim=\"token.symbol\"\n                                                    :class=\"{'is-invalid': errors.length > 0}\"\n                                                    maxlength=\"5\">\n                                            </b-form-input>\n                                            <small v-show=\"errors.length > 0\" class=\"text-danger\">\n                                                {{ errors[0] }}\n                                            </small>\n                                        </b-form-group>\n                                    </ValidationProvider>\n                                </b-col>\n                                <b-col lg=\"4\">\n                                    <ValidationProvider\n                                            name=\"token decimals\"\n                                            :rules=\"{ required: true, numeric: true, min_value: 0, max_value: 36 }\"\n                                            v-slot=\"{ errors }\">\n                                        <b-form-group\n                                                description=\"Insert the decimal precision of your token. If you don't know what to insert, use 18.\"\n                                                label=\"Token decimals *\"\n                                                label-for=\"tokenDecimals\">\n                                            <b-form-input\n                                                    id=\"tokenDecimals\"\n                                                    name=\"tokenDecimals\"\n                                                    placeholder=\"Your token decimals\"\n                                                    v-model.trim=\"token.decimals\"\n                                                    :class=\"{'is-invalid': errors.length > 0}\"\n                                                    step=\"1\">\n                                            </b-form-input>\n                                            <small v-show=\"errors.length > 0\" class=\"text-danger\">\n                                                {{ errors[0] }}\n                                            </small>\n                                        </b-form-group>\n                                    </ValidationProvider>\n                                </b-col>\n                            </b-row>\n                        </b-card>\n                        <b-card class=\"mt-3\">\n                            <b-row>\n                                <b-col lg=\"4\">\n                                    <ValidationProvider\n                                            name=\"token cap\"\n                                            :rules=\"{ required: true, numeric: true, min_value: 1, max_value: 1000000000000000 }\"\n                                            v-slot=\"{ errors }\">\n                                        <b-form-group\n                                                description=\"Insert the maximum number of tokens available.\"\n                                                label=\"Token cap *\"\n                                                label-for=\"tokenCap\">\n                                            <b-form-input\n                                                    id=\"tokenCap\"\n                                                    name=\"tokenCap\"\n                                                    placeholder=\"Your token cap\"\n                                                    v-model.trim=\"token.cap\"\n                                                    :class=\"{'is-invalid': errors.length > 0}\"\n                                                    step=\"1\">\n                                            </b-form-input>\n                                            <small v-show=\"errors.length > 0\" class=\"text-danger\">\n                                                {{ errors[0] }}\n                                            </small>\n                                        </b-form-group>\n                                    </ValidationProvider>\n                                </b-col>\n                                <b-col lg=\"4\">\n                                    <ValidationProvider\n                                            name=\"token initial balance\"\n                                            :rules=\"{ required: true, numeric: true, min_value: 0, max_value: token.cap || 0 }\"\n                                            v-slot=\"{ errors }\">\n                                        <b-form-group\n                                                description=\"Insert the initial number of tokens available. Will be put in your account.\"\n                                                label=\"Token initial balance *\"\n                                                label-for=\"tokenInitialBalance\">\n                                            <b-form-input\n                                                    id=\"tokenInitialBalance\"\n                                                    name=\"tokenInitialBalance\"\n                                                    placeholder=\"Your token initial balance\"\n                                                    v-model.trim=\"token.initialBalance\"\n                                                    :class=\"{'is-invalid': errors.length > 0}\"\n                                                    step=\"1\">\n                                            </b-form-input>\n                                            <small v-show=\"errors.length > 0\" class=\"text-danger\">\n                                                {{ errors[0] }}\n                                            </small>\n                                        </b-form-group>\n                                    </ValidationProvider>\n                                </b-col>\n                                <b-col lg=\"4\">\n                                    <b-form-group\n                                            description=\"Choose your Network.\"\n                                            label=\"Network *\"\n                                            label-for=\"network\">\n                                        <b-form-select id=\"network\" v-model=\"currentNetwork\" @input=\"initDapp\">\n                                            <option v-for=\"(n, k) in network.list\" :value=\"k\">{{ n.name }}</option>\n                                        </b-form-select>\n                                    </b-form-group>\n                                </b-col>\n                            </b-row>\n                        </b-card>\n                        <b-card class=\"mt-3\">\n                            <b-row>\n                                <b-col lg=\"12\">\n                                    <b-form-group\n                                            description=\"Choose to enable transfer during deploy or enable manually later.\"\n                                            label=\"Enable transfer\"\n                                            label-for=\"enableTransfer\">\n                                        <b-form-select id=\"network\" v-model=\"enableTransfer\">\n                                            <option :value=\"true\">Enable transfer during deploy</option>\n                                            <option :value=\"false\">Enable transfer manually later</option>\n                                        </b-form-select>\n                                    </b-form-group>\n\n                                    <b-alert show variant=\"warning\" v-if=\"enableTransfer === false\">\n                                        <strong>\n                                            NOTE: If you don't enable transfer during deploy, tokens won't be\n                                            transferable until you call the <i>enableTransfer</i> function.\n                                        </strong><br>\n                                        Only people (or smart contract) with <i>Operator</i> role will be able to\n                                        transfer tokens.<br>\n                                        Contract creator will be Operator by default, so he can transfer tokens also\n                                        when transfer is not enabled.<br>\n                                        You can also add or remove the Operator role to addresses.<br>\n                                        This is because, by business choices, you may decide not to enable transfer\n                                        until a specific time.\n                                    </b-alert>\n                                </b-col>\n                            </b-row>\n                        </b-card>\n                        <b-row class=\"mt-3\">\n                            <b-col lg=\"12\">\n                                <b-button variant=\"success\" size=\"lg\" type=\"submit\">Create Token</b-button>\n                            </b-col>\n                        </b-row>\n                    </fieldset>\n                </ValidationObserver>\n            </b-card>\n        </b-col>\n    </b-row>\n</template>\n\n<script>\n  import dapp from '../mixins/dapp';\n\n  export default {\n    name: 'Generator',\n    mixins: [\n      dapp,\n    ],\n    data () {\n      return {\n        loading: true,\n        currentNetwork: null,\n        trxHash: '',\n        makingTransaction: false,\n        formDisabled: false,\n        token: {},\n        enableTransfer: true,\n      };\n    },\n    mounted () {\n      this.currentNetwork = this.getParam('network') || this.network.default;\n      this.initDapp();\n    },\n    methods: {\n      async initDapp () {\n        this.network.current = this.network.list[this.currentNetwork];\n        try {\n          await this.initWeb3(this.currentNetwork, true);\n          this.initToken();\n          this.loading = false;\n        } catch (e) {\n          alert(e);\n          document.location.href = this.$withBase('/');\n        }\n      },\n      async generateToken () {\n        this.$refs.observer.validate().then(async (result) => {\n          if (result) {\n            if (!this.metamask.installed) {\n              alert('To create a Token please install MetaMask!');\n              return;\n            } else {\n              if (this.metamask.netId !== this.network.current.id) {\n                alert(`Your MetaMask in on the wrong network. Please switch on ${this.network.current.name} and try again!`);\n                return;\n              }\n            }\n\n            const name = this.token.name;\n            const symbol = this.token.symbol.toUpperCase();\n            const decimals = new this.web3.BigNumber(this.token.decimals);\n            const cap = new this.web3.BigNumber(this.token.cap).mul(Math.pow(10, this.token.decimals));\n            const initialBalance = new this.web3.BigNumber(this.token.initialBalance).mul(Math.pow(10, this.token.decimals)); // eslint-disable-line max-len\n            const enableTransfer = this.enableTransfer;\n\n            try {\n              this.trxHash = '';\n              this.formDisabled = true;\n              this.makingTransaction = true;\n\n              if (!this.legacy) {\n                await this.web3Provider.enable();\n              }\n\n              setTimeout(() => {\n                this.contracts.token.new(\n                  name,\n                  symbol,\n                  decimals,\n                  cap,\n                  initialBalance,\n                  enableTransfer,\n                  {\n                    from: this.web3.eth.coinbase,\n                    data: this.contracts.token.bytecode,\n                  }, (e, tokenContract) => {\n                    if (e) {\n                      this.makingTransaction = false;\n                      this.formDisabled = false;\n                    } else {\n                      // NOTE: The callback will fire twice!\n                      // Once the contract has the transactionHash property\n                      // set and once its deployed on an address.\n                      if (!tokenContract.address) {\n                        this.trxHash = tokenContract.transactionHash;\n                        this.trxLink = this.network.current.etherscanLink + '/tx/' + this.trxHash;\n                      } else {\n                        this.token.address = tokenContract.address;\n                        this.token.link = this.network.current.etherscanLink + '/token/' + this.token.address;\n                        this.$forceUpdate();\n                      }\n                    }\n                  },\n                );\n              }, 500);\n            } catch (e) {\n              this.makingTransaction = false;\n              this.formDisabled = false;\n              alert('Some error occurred. Maybe you rejected the transaction or you have MetaMask locked!');\n            }\n          }\n        }).catch((e) => {\n          console.log(e); // eslint-disable-line no-console\n          this.makingTransaction = false;\n          alert('Some error occurred.');\n        });\n      },\n      getParam (param) {\n        const vars = {};\n        window.location.href.replace(location.hash, '').replace(\n          /[?&]+([^=&]+)=?([^&]*)?/gi, // regexp\n          function (m, key, value) { // callback\n            vars[key] = value !== undefined ? value : '';\n          },\n        );\n\n        if (param) {\n          return vars[param] ? vars[param] : null;\n        }\n        return vars;\n      },\n    },\n  };\n</script>\n"],"sourceRoot":".vuepress/components"}]}